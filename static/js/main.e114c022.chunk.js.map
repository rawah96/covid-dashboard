{"version":3,"sources":["components/Charts/LineChart.js","components/Stats/Stats.js","components/Table/util.js","components/Table/Table.js","components/Header/Header.js","components/Map/Map.js","App.js","serviceWorker.js","index.js","components/Header/virus.svg","components/Header/mask.svg"],"names":["options","legend","display","element","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineChart","casesType","useState","setData","shapeData","lastDataPoint","chartData","date","cases","newDataPoint","x","y","push","useEffect","a","fetch","then","res","json","shapedData","fetchData","className","length","datasets","backgroundColor","borderColor","Stats","title","total","dailyCases","Card","CardContent","Typography","color","duration","separator","start","end","sortData","sortedData","sort","b","Table","tableData","setTableData","map","country","name","countryInfo","iso2","getCountriesData","Header","countries","setCountries","setMapCountries","setCountry","setCountryInfo","lat","lng","setCenter","setZoom","onCountryChange","e","console","log","target","code","url","lon","long","src","virus","width","mask","FormControl","Select","id","variant","onChange","MenuItem","todayCases","todayRecovered","recovered","todayDeaths","deaths","ReactFC","fcRoot","FusionCharts","FusionMaps","World","FusionTheme","Map","continents","setContinents","arr","chartConfigs","height","dataFormat","dataSource","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.e114c022.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport './LineChart.css'\nimport {Line} from 'react-chartjs-2';\nimport numeral from 'numeral';\n\nconst options = {\n    legend: {\n        display: false,\n    },\n    element: {\n        point:{\n            radius: 0,\n        },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n        mode:\"index\",\n        intersect: false,\n        callbacks: {\n            label:function(tooltipItem, data) {\n                return numeral(tooltipItem.value).format(\"+0,0\")\n            },\n        },\n    },\n    scales: {\n        xAxes: [\n            {\n                type:\"time\",\n                time: {\n                    format: \"MM/DD/YY\",\n                    tooltipFormat: \"ll\"\n                },\n            },\n        ],\n        yAxes: [\n            {\n                gridLines: {\n                    display: false,\n                },\n                ticks: {\n                    callback: function(value, index, values) {\n                        return numeral(value).format(\"0a\");\n                    },\n                },\n            },\n        ],\n    },\n}\n\nfunction LineChart({casesType ='cases'}) {\n    const [data, setData] = useState({});\n\n    // helper function\n    const shapeData = (data, casesType='cases') => {\n        const chartData =[];\n        let lastDataPoint;\n\n        for(let date in data.cases){\n            if(lastDataPoint) {\n                const newDataPoint = {\n                    x: date,\n                    y: data[casesType][date] - lastDataPoint\n                }\n                chartData.push(newDataPoint)\n            }\n            lastDataPoint = data[casesType][date];\n        }\n        return chartData;\n    }\n\n    useEffect(() => {\n        const fetchData= async () => {\n            const url = 'https://disease.sh/v3/covid-19/historical/all?lastdays=120';\n            await fetch(url)\n            .then(res => res.json())\n            .then(data => {\n                const shapedData = shapeData(data, 'cases');\n                setData(shapedData);\n            })\n        }\n\n        fetchData();\n        \n    }, [casesType])\n\n\n\n    return (\n        <div className=\"line\">\n            {data.length > 0 ? (\n                <Line \n                            options={options}\n                            data={{\n                                datasets: [{\n                                    backgroundColor: 'orange',\n                                    borderColor:'orange',\n                                    data:data,\n                                }],\n                            }}\n                        />\n            ): null}\n        </div>\n    )\n}\n\nexport default LineChart\n","import React, {useState} from 'react'\nimport './Stats.css'\nimport {Card, CardContent, Typography} from '@material-ui/core';\nimport Line from '../Charts/LineChart';\nimport Countup from 'react-countup';\n\nfunction Stats({title, dailyCases, total}) {\n    if(!total) {\n        return 'loading'\n    }\n    return (\n        <div className=\"stats\">\n            <Card className=\"info-box\">\n                <CardContent>\n                    <Typography color=\"textSecondary\" className=\"box-title\">\n                        {title}\n                    </Typography>\n                    {/* <h2 className=\"box-cases\"><small>Today:</small> {dailyCases}</h2> */}\n                    <h2 className=\"box-cases\"> \n                        <Countup duration={2} separator=',' start={0} end={total}/>\n                    </h2>\n                </CardContent>\n            </Card>\n        </div>\n    )\n}\n\nexport default Stats\n","import React from 'react'\nimport numeral from 'numeral';\nimport {Circle, Popup} from 'react-leaflet';\n\nexport const sortData = data => {\n    // copy data into array\n    const sortedData = [...data];\n\n    // grabs first data and calls it a, then second and calls it b\n    sortedData.sort((a,b) => {\n        if(a.cases > b.cases) {\n            return -1;\n        } else {\n            return 1;\n        }\n    })\n    return sortedData;\n}\n\nconst casesTypeColors ={\n    cases: {\n        hex: \"#CC1034\",\n        multiplier:800\n    },\n    recovered: {\n        hex: \"#7dd71d\",\n        multipier:1200,\n    },\n    deaths: {\n        hex: \"#fb4443\",\n        multipier:2000\n    }\n}\n\nexport const showDataOnMap = (data, casesType='cases') => {\n    data.map(country => (\n        <Circle\n            center={[country.countryInfo.lat, country.countryInfo.long]}\n            fillOpacity={0.4}  \n            color={casesTypeColors[casesType].hex}\n            radius={\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multipier\n            }  \n        >\n            <Popup>\n                <h1>i'm a popup!</h1>\n            </Popup>\n\n        </Circle>\n    ))\n};","import React, {useState, useEffect} from 'react'\nimport './Table.css'\nimport {sortData} from './util'\nimport CountUp from 'react-countup';\nfunction Table() {\n    const [tableData, setTableData] = useState([]);\n\n    useEffect(() => {\n        const getCountriesData = async () => {\n        const url='https://disease.sh/v3/covid-19/countries';\n        fetch(url)\n        .then(res => res.json())\n        .then(data => {\n            const countries = data.map(country => (\n                {\n                    name: country.country,\n                    value:country.countryInfo.iso2,\n                }\n            ));\n            const sortedData = sortData(data);\n            setTableData(sortedData);\n        }\n            )\n    }\n    getCountriesData();\n    }, []);\n\n    return (\n        <div className=\"test\">\n        <div className=\"table\">\n        <h1 className=\"th\">Cases by Country </h1>\n        <br/>\n        <tr>\n            <td>Country</td>\n            <td>Cases</td>\n            <br/>\n            <br/>\n        </tr>\n            {tableData.map(country => (\n                <tr>\n                    <td>{country.country}</td>\n                    {/* <td>{country.cases}</td> */}\n                    <td>\n                    {\n                            country.cases ?\n                            <CountUp separator=',' start={country.cases} end={country.cases}/>\n                            : 'loading ...'\n                        }\n                    </td>\n                </tr>\n            ))}\n        </div>\n        </div>\n    )\n}\n\nexport default Table\n","import React, {useState, useEffect} from 'react'\nimport './Header.css'\nimport {FormControl, MenuItem, Select, CardContent, Card} from '@material-ui/core' \nimport virus from './virus.svg';\nimport mask from './mask.svg'\nimport Stats from '../Stats/Stats'\nimport Table from '../Table/Table'\nimport Line from '../Charts/LineChart'\nimport Worldmap from '../Worldmap/Worldmap'\n// will animate the svgs\n\nfunction Header() {\n    // state = variable in react.. \n    const [countries, setCountries] = useState([]);\n    const [mapCountries, setMapCountries] = useState([]);\n    // end point = https://disease.sh/v3/covid-19/countries\n    // useEffect => runs a piece of code based on a given condition\n    useEffect(() => {\n        // code inside here will run once one the component loads (if [] is empty), and will not run again after.. \n        // if there was a variable in [], it will run when the variable changes..\n\n        // async => send req, wait for it, do something.. \n        // useEffect write internal function\n        const getCountriesData = async() => {\n            const url = 'https://disease.sh/v3/covid-19/countries'\n            await fetch(url)\n            .then(res => res.json())\n            .then(data => {\n                const countries = data.map(country => ({\n                    name: country.country,\n                    value: country.countryInfo.iso2\n                }));\n                setCountries(countries);\n                setMapCountries(data)\n            });\n        }\n        // call the function\n        getCountriesData();\n    }, []); // [] is the condition\n\n    // to remember which one we selected\n    const [country, setCountry] = useState('worldwide');\n    const [countryInfo, setCountryInfo] = useState({});\n\n    const [center, setCenter] = useState({lat: 34.80746, lng:-40.4796});\n    const [zoom, setZoom] = useState(3);\n\n\n    const  onCountryChange = async (e) => {\n        console.log('e ==> ', e.target.value)\n        const code = e.target.value; \n        setCountry(code);\n        const url = code === 'worldwide' ? 'https://disease.sh/v3/covid-19/all'\n        : `https://disease.sh/v3/covid-19/countries/${code}`\n\n        // make the call - async\n        await fetch(url)\n        .then(res => res.json())\n        .then(data => {\n            setCountry(code)\n            setCountryInfo(data);\n            if(data.countryInfo.lat && data.countryInfo.lon) {\n                setCenter([data.countryInfo.lat, data.countryInfo.long]);\n            }\n            setZoom(4);\n        })\n    }\n\n    useEffect(() => {\n        fetch('https://disease.sh/v3/covid-19/all')\n        .then(res => res.json())\n        .then(data => setCountryInfo(data))\n    },[]);\n\n\n    return (\n        <>\n        <div className=\"header\">\n            <div className=\"logo\">\n                <h2>COVID-19</h2>\n                <img src={virus} width=\"6%\"/> <img src={mask} width=\"6%\"/>\n            </div>\n            <FormControl className=\"app-dropdown\">\n            <Select\n            id=\"select\"\n            variant=\"outlined\"\n            value={country}\n            onChange={e => onCountryChange(e)}\n            >\n                <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n            {/* LOOP THROUGH all countries .. with state */}\n                {countries.map(country => \n                    <MenuItem value={country.value}>{country.name}</MenuItem>    \n                )}\n            </Select>\n        </FormControl>\n        </div>\n        <div id=\"title\">\n            <h1 id=\"total\">Total</h1>\n            <div id=\"empty\"></div>\n        </div>\n        <div className=\"app-stats\">\n            <div>\n            <div id=\"stats\">\n                <Stats \n                title=\"Current\"\n                dailyCases={countryInfo.todayCases} \n                total={countryInfo.cases}\n                />\n                <Stats \n                title=\"Recovered\"\n                dailyCases={countryInfo.todayRecovered}\n                total={countryInfo.recovered}\n                />\n                <Stats \n                title=\"Deaths\"\n                dailyCases={countryInfo.todayDeaths}\n                total={countryInfo.deaths}\n                />      \n            </div>\n            <div className=\"line-chart\">\n                <Line />\n            </div >\n            </div>      \n            <Table />\n        </div>\n        </>\n    )\n}\n\nexport default Header\n","import React, {useState, useEffect} from 'react'\nimport './Map.css'\nimport ReactDOM from 'react-dom';\n\n// Include the react-fusioncharts component\nimport ReactFC from 'react-fusioncharts';\n\n// Include the fusioncharts library\nimport FusionCharts from 'fusioncharts';\n\n//Import FusionMaps\nimport FusionMaps from 'fusioncharts/maps/es/fusioncharts.world';\nimport World from 'fusioncharts/fusioncharts.maps'\n\n// Include the theme as fusion\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion';\nReactFC.fcRoot(FusionCharts, FusionMaps, World, FusionTheme);\n\n\n\nfunction Map() {\n    const [continents, setContinents] = useState([]);\n  useEffect(() => {\n    const getCountriesData = async() => {\n      const url = 'https://disease.sh/v3/covid-19/continents'\n      await fetch(url)\n      .then(res => res.json())\n      .then(data => {\n          /*const countries = data.map(country => ({\n              name: country.country,\n              value: country.countryInfo.iso2\n          }));*/\n          //countries.map(e => console.log(e.value))\n\n          setContinents(data)\n      });\n  }\n  // call the function\n  getCountriesData();\n}, []);\n\n\nconst arr = continents.map(e => e.cases);\n\n/*\n0: 7504662 --> NA\n1: 6533107 --> SA\n2: 7409280 --> Asia\n3: 3682636 --> EUROPE\n4: 1281074 --> AFRICA\n5: 28953 --> AUSTRALIA\n*/\n\nconst dataset = [\n{\n    \"id\": \"NA\",\n    \"value\": arr[0],\n    \"showLabel\": \"1\"\n}, {\n    \"id\": \"SA\",\n    \"value\": arr[1],\n    \"showLabel\": \"1\"\n}, {\n    \"id\": \"AS\",\n    \"value\": arr[2],\n    \"showLabel\": \"1\"\n}, {\n    \"id\": \"EU\",\n    \"value\": arr[3],\n    \"showLabel\": \"1\"\n}, {\n    \"id\": \"AF\",\n    \"value\": arr[4],\n    \"showLabel\": \"1\"\n}, {\n    \"id\": \"AU\",\n    \"value\": arr[5],\n    \"showLabel\": \"1\"\n}\n];\n\nconst colorrange = {\n    \"minvalue\": \"0\",\n    \"code\": \"#FFE0B2\",\n    \"gradient\": \"1\",\n    \"color\": [{\n        \"minvalue\": \"28.95\",\n        \"maxvalue\": \"1.28\",\n        \"color\": \"#FFD74D\"\n    }, {\n        \"minvalue\": \"3.68\",\n        \"maxvalue\": \"6.53\",\n        \"color\": \"#FB8C00\"\n    }, {\n        \"minvalue\": \"7.41\",\n        \"maxvalue\": \"7.5\",\n        \"color\": \"#E65100\"\n    }]\n};\n\n// STEP 3 - Creating the JSON object to store the chart configurations\nconst chartConfigs = {\n    type: 'world', // The chart type\n    width: '1000', // Width of the chart\n    height: '600', // Height of the chart\n    dataFormat: 'json', // Data type\n    dataSource: {\n        // Map Configuration\n        \"chart\": {\n            \"caption\": \"COVID-19 SPREAD\",\n            \"subcaption\": \"2019-2020\",\n            \"includevalueinlabels\": \"1\",\n            \"labelsepchar\": \": \",\n            \"entityFillHoverColor\": \"#FFF9C4\",\n            \"theme\": \"fusion\"\n        },\n        // Aesthetics; ranges synced with the slider\n        \"colorrange\": colorrange,\n        // Source data as JSON --> id represents countries of the world.\n        \"data\": dataset\n    }\n}\n\n    return (\n        <div className=\"map\">\n                 <ReactFC {\n                     ...chartConfigs\n                 }/>\n           \n            \n        </div>\n    )\n}\n\nexport default Map\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Header from './components/Header/Header'\nimport Stats from './components/Stats/Stats'\nimport Map from './components/Map/Map'\nimport { Card, CardContent } from '@material-ui/core';\nimport Table from './components/Table/Table'\nimport LineChart from './components/Charts/LineChart'\nimport Worldmap from './components/Worldmap/Worldmap'\nimport \"leaflet/dist/leaflet.css\"\nfunction App() {\n\n  return (\n    <div className=\"app\">\n\n      <Header />\n      {/*<Card className=\"line-chart\">\n        <CardContent >\n          <LineChart />\n        </CardContent>\n  </Card>*/}\n      <Card>\n        <CardContent>\n          <Map />\n        </CardContent>\n      </Card>\n      {/* sidebar with table option - dev and contact & social media icons */}\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/virus.4e113c7e.svg\";","module.exports = __webpack_public_path__ + \"static/media/mask.6e5b429d.svg\";"],"sourceRoot":""}